#include <iostream>
#include <string>
#include <cmath>
#include <iomanip>

using namespace std;

const int TABLE_SIZE = 100;

struct BankAccount {
    string fullName;
    int accountNumber;
    double amount;
    bool isOccupied;// флаг , для проверки занятости ячейки
};

struct HashTable {
    BankAccount* table;
    int size;
    int collisions;
};

int hashFunction(int key, int tableSize) {
    double A = (sqrt(5) - 1) / 2;
    double val = key * A;
    double fractional = val - floor(val);
    return (int)(tableSize * fractional);
}

int rehash(int hash, int attempt, int tableSize) {
    return (hash + attempt) % tableSize;
}

void initHashTable(HashTable* ht, int tableSize) {
    ht->size = tableSize;
    ht->collisions = 0;
    ht->table = new BankAccount[tableSize];
    for (int i = 0; i < tableSize; i++) {
        ht->table[i].isOccupied = false;
    }
}

void freeHashTable(HashTable* ht) {
    delete[] ht->table;
}

void insertToHashTable(HashTable* ht, int accountNumber, const string& fullName, double amount) {
    int hash = hashFunction(accountNumber, ht->size);
    int attempt = 0;

    while (attempt < ht->size) {
        int index = rehash(hash, attempt, ht->size);

        if (!ht->table[index].isOccupied) {
            ht->table[index].fullName = fullName;
            ht->table[index].accountNumber = accountNumber;
            ht->table[index].amount = amount;
            ht->table[index].isOccupied = true;
            if (attempt > 0) ht->collisions += attempt;
            return;
        }
        attempt++;
    }

    ht->collisions++;
}

BankAccount* searchInHashTable(HashTable* ht, int accountNumber) {
    int hash = hashFunction(accountNumber, ht->size);
    int attempt = 0;

    while (attempt < ht->size) {
        int index = rehash(hash, attempt, ht->size);

        if (!ht->table[index].isOccupied) {
            return nullptr;
        }

        if (ht->table[index].accountNumber == accountNumber) {
            return &ht->table[index];
        }

        attempt++;
    }

    return nullptr;
}

int main() {
    setlocale(LC_ALL, "ru");
    struct {
        string fullName;
        double amount;
    } accountsData[100] = {
        {"Иванов Иван Иванович", 15000.50},
        {"Петров Петр Петрович", 23456.78},
        {"Сидоров Сергей Сергеевич", 34567.89},
        {"Смирнов Александр Николаевич", 12345.67},
        {"Кузнецов Дмитрий Васильевич", 45678.90},
        {"Попов Андрей Сергеевич", 98765.43},
        {"Лебедев Михаил Петрович", 65432.10},
        {"Козлов Артем Викторович", 32145.67},
        {"Новиков Павел Дмитриевич", 87654.32},
        {"Морозов Игорь Анатольевич", 23456.78},
        {"Павлов Виктор Иванович", 76543.21},
        {"Семенов Алексей Владимирович", 34567.89},
        {"Голубев Евгений Олегович", 12345.67},
        {"Виноградов Сергей Михайлович", 98765.43},
        {"Богданов Денис Сергеевич", 65432.10},
        {"Воробьев Антон Павлович", 32145.67},
        {"Федоров Кирилл Андреевич", 87654.32},
        {"Михайлов Артем Игоревич", 23456.78},
        {"Беляев Максим Витальевич", 76543.21},
        {"Тарасов Владислав Олегович", 34567.89},
        {"Белов Станислав Николаевич", 12345.67},
        {"Комаров Глеб Александрович", 98765.43},
        {"Орлов Роман Денисович", 65432.10},
        {"Киселев Илья Валерьевич", 32145.67},
        {"Макаров Никита Сергеевич", 87654.32},
        {"Андреев Владимир Петрович", 23456.78},
        {"Ковалев Артур Викторович", 76543.21},
        {"Ильин Константин Алексеевич", 34567.89},
        {"Гусев Евгений Дмитриевич", 12345.67},
        {"Титов Вадим Олегович", 98765.43},
        {"Кузьмин Алексей Андреевич", 65432.10},
        {"Кудрявцев Дмитрий Игоревич", 32145.67},
        {"Баранов Сергей Владимирович", 87654.32},
        {"Поляков Антон Михайлович", 23456.78},
        {"Степанов Игорь Николаевич", 76543.21},
        {"Васильев Артем Сергеевич", 34567.89},
        {"Зайцев Денис Олегович", 12345.67},
        {"Ершов Павел Викторович", 98765.43},
        {"Николаев Максим Денисович", 65432.10},
        {"Герасимов Владислав Андреевич", 32145.67},
        {"Данилов Алексей Игоревич", 87654.32},
        {"Савельев Иван Алексеевич", 23456.78},
        {"Романов Артур Витальевич", 76543.21},
        {"Жуков Дмитрий Сергеевич", 34567.89},
        {"Фролов Кирилл Николаевич", 12345.67},
        {"Григорьев Евгений Олегович", 98765.43},
        {"Лазарев Андрей Владимирович", 65432.10},
        {"Медведев Сергей Дмитриевич", 32145.67},
        {"Егоров Артем Игоревич", 87654.32},
        {"Сорокин Илья Петрович", 23456.78},
        {"Тихонов Денис Викторович", 76543.21},
        {"Крылов Алексей Сергеевич", 34567.89},
        {"Никитин Владимир Олегович", 12345.67},
        {"Логинов Максим Андреевич", 98765.43},
        {"Фомин Артур Денисович", 65432.10},
        {"Сергеев Игорь Алексеевич", 32145.67},
        {"Коновалов Павел Николаевич", 87654.32},
        {"Лихачев Дмитрий Витальевич", 23456.78},
        {"Борисов Антон Сергеевич", 76543.21},
        {"Яковлев Евгений Игоревич", 34567.89},
        {"Куликов Владислав Олегович", 12345.67},
        {"Карпов Алексей Владимирович", 98765.43},
        {"Щербаков Денис Петрович", 65432.10},
        {"Максимов Сергей Дмитриевич", 32145.67},
        {"Белоусов Артем Андреевич", 87654.32},
        {"Суханов Илья Николаевич", 23456.78},
        {"Громов Кирилл Викторович", 76543.21},
        {"Одинцов Владимир Сергеевич", 34567.89},
        {"Терентьев Дмитрий Олегович", 12345.67},
        {"Кольцов Алексей Игоревич", 98765.43},
        {"Родионов Артур Алексеевич", 65432.10},
        {"Антонов Иван Денисович", 32145.67},
        {"Артемьев Павел Витальевич", 87654.32},
        {"Курочкин Максим Сергеевич", 23456.78},
        {"Львов Денис Николаевич", 76543.21},
        {"Соболев Евгений Владимирович", 34567.89},
        {"Ефимов Андрей Олегович", 12345.67},
        {"Федосеев Артем Дмитриевич", 98765.43},
        {"Панов Игорь Игоревич", 65432.10},
        {"Маслов Сергей Алексеевич", 32145.67},
        {"Кириллов Владислав Андреевич", 87654.32},
        {"Майоров Дмитрий Петрович", 23456.78},
        {"Суворов Алексей Викторович", 76543.21},
        {"Власов Илья Сергеевич", 34567.89},
        {"Котов Владимир Олегович", 12345.67},
        {"Зуев Денис Николаевич", 98765.43},
        {"Трофимов Артур Дмитриевич", 65432.10},
        {"Симонов Павел Игоревич", 32145.67},
        {"Королев Максим Алексеевич", 87654.32},
        {"Гаврилов Антон Владимирович", 23456.78},
        {"Исаев Евгений Денисович", 76543.21},
        {"Жданов Сергей Олегович", 34567.89},
        {"Горбунов Андрей Витальевич", 12345.67},
        {"Лукин Артем Сергеевич", 98765.43},
        {"Тимашев Дмитрий Николаевич", 65432.10},
        {"Филиппов Игорь Алексеевич", 32145.67},
        {"Марков Владислав Андреевич", 87654.32},
        {"Чернов Алексей Петрович", 23456.78},
        {"Афанасьев Денис Викторович", 76543.21},
        {"Дорофеев Илья Дмитриевич", 34567.89},
    };
    HashTable ht;
    initHashTable(&ht, TABLE_SIZE);
    for (int i = 0; i < 89; i++) {
        int accountNumber = 10000 + i; // Номера счетов от 10000 до 10088
        insertToHashTable(&ht, accountNumber, accountsData[i].fullName, accountsData[i].amount);
    }
    cout << "Хеш-таблица создана. Коллизии при вставке: " << ht.collisions << endl;
    while (true) {
        cout << "\nВведите номер счета (10000-10088) или 0 для выхода: ";
        int accountNumber;
        cin >> accountNumber;

        if (accountNumber == 0) break;

        if (accountNumber < 10000 || accountNumber > 10099) {
            cout << "Некорректный номер счета!" << endl;
            continue;
        }
        BankAccount* account = searchInHashTable(&ht, accountNumber);
        if (account) {
            cout << "Найден счет:" << endl;
            cout << "ФИО: " << account->fullName << endl;
            cout << "Номер счета: " << account->accountNumber << endl;
            cout << "Сумма: " << fixed << setprecision(2) << account->amount << " руб." << endl;
        }
        else {
            cout << "Счет не найден!" << endl;
        }
    }
    freeHashTable(&ht);

    return 0;
}